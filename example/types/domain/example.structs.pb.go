// Code generated by protoc-gen-gotags. DO NOT EDIT.
// source: example.proto

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	example.proto

It has these top-level messages:
	StarfleetShip
*/
package example

import protodef "github.com/dkfbasel/protobuf/example/types/proto"
import fmt "fmt"
import _ "github.com/dkfbasel/protobuf/types/timestamp"
import _ "github.com/dkfbasel/protobuf/types/nullstring"
import _ "github.com/dkfbasel/protobuf/types/nullint"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf

// StarfleetShip ...
type StarfleetShip struct {
	name           string      // db:"name"
	passengers     *NullInt    // db:"passengers"
	operation      *NullString // db:"operation"
	departure_time *Timestamp  // db:"departure_time"
}

// --- STRUCT CONVERSION ---

// Proto will convert our custom type to a struct that can be
// serialized as protobuf
func (from *StarfleetShip) Proto() (*protodef.StarfleetShip, error) {
	var err error

	if from == nil {
		return nil, nil
	}

	to := protodef.StarfleetShip{}

	to.name = from.name

	to.passengers, err = from.passengers.Proto()
	if err != nil {
		return nil, err
	}

	to.operation, err = from.operation.Proto()
	if err != nil {
		return nil, err
	}

	to.departure_time, err = from.departure_time.Proto()
	if err != nil {
		return nil, err
	}

	return &to, err
}

// FromProtoStarfleetShip will convert the proto optimized struct into
// an easier to use go structs
func (to *StarfleetShip) FromProto(from *protodef.StarfleetShip) error {
	var err error

	if from == nil {
		return nil
	}

	toTmp := StarfleetShip{}

	toTmp.name = from.Getname()

	tmp := NullInt{}
	err = tmp.FromProto(from.Getpassengers())
	if err != nil {
		return err
	}
	toTmp.passengers = &tmp

	tmp := NullString{}
	err = tmp.FromProto(from.Getoperation())
	if err != nil {
		return err
	}
	toTmp.operation = &tmp

	tmp := Timestamp{}
	err = tmp.FromProto(from.Getdeparture_time())
	if err != nil {
		return err
	}
	toTmp.departure_time = &tmp

	if err != nil {
		return err
	}

	*to = toTmp

	return nil
}
