// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package t1 is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	TestRequest
	TestNested
	TestResponse
*/
package t1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TestRequest is used to do request a test run
type TestRequest struct {
	// some information
	Name           string        `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Function       int32         `protobuf:"varint,2,opt,name=Function" json:"Function,omitempty"`
	SubItemEmbeded *TestNested   `protobuf:"bytes,3,opt,name=SubItemEmbeded" json:"SubItemEmbeded,omitempty"`
	SubItemNested  *TestNested   `protobuf:"bytes,4,opt,name=SubItemNested" json:"SubItemNested,omitempty"`
	SubItemsNested []*TestNested `protobuf:"bytes,5,rep,name=SubItemsNested" json:"SubItemsNested,omitempty"`
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TestRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestRequest) GetFunction() int32 {
	if m != nil {
		return m.Function
	}
	return 0
}

func (m *TestRequest) GetSubItemEmbeded() *TestNested {
	if m != nil {
		return m.SubItemEmbeded
	}
	return nil
}

func (m *TestRequest) GetSubItemNested() *TestNested {
	if m != nil {
		return m.SubItemNested
	}
	return nil
}

func (m *TestRequest) GetSubItemsNested() []*TestNested {
	if m != nil {
		return m.SubItemsNested
	}
	return nil
}

type TestNested struct {
	Name     string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Function string `protobuf:"bytes,2,opt,name=Function" json:"Function,omitempty"`
}

func (m *TestNested) Reset()                    { *m = TestNested{} }
func (m *TestNested) String() string            { return proto.CompactTextString(m) }
func (*TestNested) ProtoMessage()               {}
func (*TestNested) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestNested) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestNested) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

type TestResponse struct {
	// status will return the sending status: ok
	// if sending fails, an error will be returned
	Status []string `protobuf:"bytes,1,rep,name=Status" json:"Status,omitempty"`
}

func (m *TestResponse) Reset()                    { *m = TestResponse{} }
func (m *TestResponse) String() string            { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()               {}
func (*TestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TestResponse) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "t1.TestRequest")
	proto.RegisterType((*TestNested)(nil), "t1.TestNested")
	proto.RegisterType((*TestResponse)(nil), "t1.TestResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Test service

type TestClient interface {
	// Send can be used to send a message to the email service for delivery
	DoTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) DoTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := grpc.Invoke(ctx, "/t1.Test/DoTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service

type TestServer interface {
	// Send can be used to send a message to the email service for delivery
	DoTest(context.Context, *TestRequest) (*TestResponse, error)
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_DoTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).DoTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t1.Test/DoTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).DoTest(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "t1.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoTest",
			Handler:    _Test_DoTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x31, 0x54, 0x7a, 0xcc, 0xc8, 0xc5, 0x1d,
	0x92, 0x5a, 0x5c, 0x12, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc4, 0xc5, 0xe2, 0x97,
	0x98, 0x9b, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x66, 0x0b, 0x49, 0x71, 0x71, 0xb8,
	0x95, 0xe6, 0x25, 0x97, 0x64, 0xe6, 0xe7, 0x49, 0x30, 0x29, 0x30, 0x6a, 0xb0, 0x06, 0xc1, 0xf9,
	0x42, 0x66, 0x5c, 0x7c, 0xc1, 0xa5, 0x49, 0x9e, 0x25, 0xa9, 0xb9, 0xae, 0xb9, 0x49, 0xa9, 0x29,
	0xa9, 0x29, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x7c, 0x7a, 0x25, 0x86, 0x7a, 0x20, 0x83,
	0xfd, 0x52, 0x8b, 0x4b, 0x52, 0x53, 0x82, 0xd0, 0x54, 0x09, 0x99, 0x70, 0xf1, 0x42, 0x45, 0x20,
	0x0a, 0x24, 0x58, 0xb0, 0x6a, 0x43, 0x55, 0x84, 0x64, 0x5b, 0x31, 0x54, 0x1b, 0xab, 0x02, 0x33,
	0x1e, 0xdb, 0xa0, 0xaa, 0x94, 0x6c, 0xb8, 0xb8, 0x10, 0xb2, 0x44, 0xf9, 0x91, 0x13, 0xe1, 0x47,
	0x25, 0x35, 0x2e, 0x1e, 0x48, 0x10, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89, 0x71, 0xb1,
	0x05, 0x97, 0x24, 0x96, 0x94, 0x16, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x06, 0x41, 0x79, 0x46,
	0xa6, 0x5c, 0x2c, 0x20, 0x75, 0x42, 0xba, 0x5c, 0x6c, 0x2e, 0xf9, 0x60, 0x16, 0x3f, 0xcc, 0x5d,
	0xd0, 0xe0, 0x95, 0x12, 0x40, 0x08, 0x40, 0x0c, 0x53, 0x62, 0x48, 0x62, 0x03, 0xc7, 0x86, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0x58, 0x44, 0xe7, 0x61, 0x9b, 0x01, 0x00, 0x00,
}
