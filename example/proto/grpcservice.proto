syntax = "proto3";

package grpcservice;

import "dkfbasel/protobuf/timestamp.proto";
import "dkfbasel/protobuf/nullstring.proto";

// Butler provides handy functions for you
service Butler {
	// Iron will take a wrinkled item and remove all wrinkels
	rpc Iron(WrinkledItem) returns (SmoothItem) {}
}

// the city where the branch of our company is located
// enum Location {
// 	Basel = 0;
// 	Zurich = 1;
// 	Luzern = 2;
// 	Other = 3;
// }

// WrinkledItem is used for items with multiple wrinkes
message WrinkledItem {

	// customer will contain the name of the customer
	string customer = 1;

	// Location Location = 2;

	// nested messages can be embedded directly using the tag compose:"embed"
	Item item = 4; // `compose:"embed"`

	dkfbasel.protobuf.Timestamp brought_in = 5; // `db:"brought_in_for_something"`

	dkfbasel.protobuf.NullString this_could_be_nothing = 6;
}

// SmoothItem is used as response with associated costs
message SmoothItem {
	Item item = 1; // `compose:"embed"`
	int32 cost = 2; // cost in USD
}

// Item contains the information about a specific item
message Item {
	string name = 1;     // `db:"name" json:"name,omitempty"`
	int32 wrinkels = 2;  // `db:"no_wrinkles" json:"wrinkels,omitempty"`
}
